openapi: 3.0.0
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9
servers:
  - url: http://localhost:5000
    description: Optional server description, e.g. Main (production) server
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  /users:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /users/register:
    post:
      summary: Creates a new User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  required: true
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
                confirmPassword:
                  type: string
                  required: true
                parentReferralCode:
                  type: string
                  required: false
      responses: 
        '201':
          description: Created
        '400':
          description: Bad request
  /users/login:
    summary: Login user
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties: 
              email:
                type: string
                required: true
              password:
                type: string
                required: true
    responses:
      '200':
        description: User logged in successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                user:
                  type: object
                  properties: 
                    id:
                      type: string
                    name:
                      type: string
                    email:
                      type: string
                    referralCode:
                      type: string
      '404':
        description: User not found
      '400':
        description: Bad Request
  /users/invite:
    post:
      summary: Invites another user via mailtrap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                email:
                  type: string
                  required: true
      responses: 
        '201':
          description: Invited
        '400':
          description: Bad Request            
  /users/{id}:
    get:
      summary: Gets user by id
      parameters: 
        - name: id
          in: path
          required: true
          description: Enter User Object ID
          schema:
            type: string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
  /users/top-most-ancestor/{id}:
    get:
      summary: Gets top most ancestor of user
      parameters:
        - name: id
          in: path
          required: true
          description: Enter User Object ID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /users/descendants/{id}:
    get:
      summary: Gets list of descendants if any
      parameters:
        - name: id
          in: path
          required: true
          description: Enter User Object ID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

        

      
  